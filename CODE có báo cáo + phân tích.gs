var TELEGRAM_BOT_TOKEN = "TOKEN C·ª¶A B·∫†N"; // Thay b·∫±ng token bot c·ªßa b·∫°n
var TELEGRAM_CHAT_ID = "CHAT ID C·ª¶A B·∫†N"; // Sau khi ch·∫°y getChatID(), c·∫≠p nh·∫≠t gi√° tr·ªã n√†y

// ‚úÖ X√≥a Webhook ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng getUpdates() l·∫•y CHAT_ID
function deleteWebhook() {
  var url = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/deleteWebhook";
  var response = UrlFetchApp.fetch(url);
  Logger.log("Delete Webhook response: " + response.getContentText());
}

// ‚úÖ L·∫•y CHAT_ID t·ª± ƒë·ªông t·ª´ tin nh·∫Øn g·∫ßn nh·∫•t
function getChatID() {
  var url = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/getUpdates";
  var response = UrlFetchApp.fetch(url);
  var data = JSON.parse(response.getContentText());
  
  if (data.result.length > 0) {
    var chatID = data.result[data.result.length - 1].message.chat.id;
    Logger.log("CHAT_ID: " + chatID);
    return chatID;
  } else {
    Logger.log("Kh√¥ng t√¨m th·∫•y tin nh·∫Øn n√†o.");
    return null;
  }
}

// ‚úÖ Thi·∫øt l·∫≠p Webhook t·ª± ƒë·ªông sau khi tri·ªÉn khai
function setupWebhook() {
  var scriptUrl = "URL C·ª¶A B·∫†N"; // Thay URL c·ªßa Apps Script
  var url = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/setWebhook?url=" + encodeURIComponent(scriptUrl);
  
  var response = UrlFetchApp.fetch(url);
  Logger.log("Webhook response: " + response.getContentText());
}

// ‚úÖ L∆∞u update_id m·ªõi nh·∫•t v√†o sheet "Update Log" (ch·ªâ l∆∞u 1 ID duy nh·∫•t)
function saveUpdateID(update_id) {
  var sheetName = "Update Log";
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName(sheetName);

  // N·∫øu sheet ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
  if (!sheet) {
    sheet = ss.insertSheet(sheetName);
    sheet.appendRow(["Update_ID"]); // T·∫°o ti√™u ƒë·ªÅ c·ªôt
  }

  // L·∫•y gi√° tr·ªã update_id hi·ªán t·∫°i t·ª´ √¥ A2
  var lastUpdateID = sheet.getRange("A2").getValue();

  // N·∫øu update_id ƒë√£ t·ªìn t·∫°i, b·ªè qua
  if (String(lastUpdateID) === String(update_id)) {
    Logger.log("üîÅ Tin nh·∫Øn tr√πng, b·ªè qua update_id: " + update_id);
    return false;
  }

  // Ghi ƒë√® update_id m·ªõi v√†o √¥ A2
  sheet.getRange("A2").setValue(update_id);
  Logger.log("‚úÖ Update ID m·ªõi nh·∫•t ƒë√£ l∆∞u: " + update_id);

  return true; // X√°c nh·∫≠n ƒë√£ c·∫≠p nh·∫≠t update_id m·ªõi
}

// ‚úÖ G·ª≠i tr·∫°ng th√°i "typing..." ƒë·ªÉ hi·ªÉn th·ªã bot ƒëang nh·∫≠p li·ªáu
function sendTypingAction() {
  var url = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/sendChatAction";
  var payload = {
    "chat_id": TELEGRAM_CHAT_ID,
    "action": "typing"
  };

  var options = {
    "method": "post",
    "contentType": "application/json",
    "payload": JSON.stringify(payload)
  };

  UrlFetchApp.fetch(url, options);
}

// ‚úÖ X·ª≠ l√Ω tin nh·∫Øn t·ª´ Telegram
function doPost(e) {
    if (!e.postData || !e.postData.contents) {
        Logger.log("‚ùå D·ªØ li·ªáu POST kh√¥ng h·ª£p l·ªá!");
        return;
    }

    var data;
    try {
        data = JSON.parse(e.postData.contents);
        Logger.log("üì© D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c: " + JSON.stringify(data));
    } catch (error) {
        Logger.log("‚ùå L·ªói khi ph√¢n t√≠ch JSON: " + error.message);
        return;
    }

    if (!data.message || !data.message.text) {
        Logger.log("‚ùå Tin nh·∫Øn kh√¥ng c√≥ n·ªôi dung text!");
        return;
    }

    var text = data.message.text.trim();
    var update_id = data.update_id || null;

  // ‚úÖ X·ª≠ l√Ω l·ªánh b√°o c√°o ng√†y
if (text.startsWith("/baocaongay")) {
    text = text.replace(/\s+/g, " ").trim(); // Chu·∫©n h√≥a kho·∫£ng tr·∫Øng

    let day, month;
    const dateMatch = text.match(/^\/baocaongay\s*(\d{1,2})?\/?(\d{1,2})?$/);

    if (dateMatch && dateMatch[1] && dateMatch[2]) {
        // N·∫øu nh·∫≠p ng√†y & th√°ng (VD: /baocaongay 5/2)
        day = Number(dateMatch[1]);
        month = Number(dateMatch[2]);
    } else {
        // N·∫øu kh√¥ng c√≥ s·ªë ng√†y, l·∫•y ng√†y hi·ªán t·∫°i
        const now = new Date();
        day = now.getDate();
        month = now.getMonth() + 1;
    }

    // ‚úÖ Ki·ªÉm tra ng√†y & th√°ng h·ª£p l·ªá
    if (month < 1 || month > 12 || day < 1 || day > 31) {
        sendMessage("‚ùå Ng√†y ho·∫∑c th√°ng kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng.\nV√≠ d·ª•: `/baocaongay 5/2` ho·∫∑c `/baocaongay` ƒë·ªÉ l·∫•y ng√†y hi·ªán t·∫°i.");
        return;
    }

    sendTypingAction();
    sendDailyReport(day, month);
    return;
}
// ‚úÖ X·ª≠ l√Ω l·ªánh b√°o c√°o th√°ng
if (text.startsWith("/baocaothang")) {
    text = text.replace(/\s+/g, " ").trim(); // Chu·∫©n h√≥a kho·∫£ng tr·∫Øng

    let month;
    const monthMatch = text.match(/^\/baocaothang\s*(\d{1,2})?$/);

    if (monthMatch && monthMatch[1]) {
        month = Number(monthMatch[1]);
    } else {
        // ‚úÖ N·∫øu kh√¥ng c√≥ s·ªë th√°ng, l·∫•y th√°ng hi·ªán t·∫°i
        const now = new Date();
        month = now.getMonth() + 1; // V√¨ getMonth() tr·∫£ v·ªÅ t·ª´ 0-11, n√™n +1
    }

    // ‚úÖ Ki·ªÉm tra th√°ng h·ª£p l·ªá (1-12)
    if (month < 1 || month > 12) {
        sendMessage("‚ùå Th√°ng kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p t·ª´ 1 ƒë·∫øn 12.");
        return;
    }

    sendTypingAction();
    sendMonthlyReport(month);
    return;
}
// ‚úÖ S·ª≠a l·ªói h√†m x·ª≠ l√Ω l·ªánh ph√¢n t√≠ch th√°ng
if (text.startsWith("/phantichthang")) {
    text = text.replace(/\s+/g, " ").trim();
    let month;
    const monthMatch = text.match(/^\/phantichthang\s*(\d{1,2})?$/);
    
    if (monthMatch && monthMatch[1]) {
        month = Number(monthMatch[1]);
    } else {
        month = new Date().getMonth() + 1; // L·∫•y th√°ng hi·ªán t·∫°i
    }
    
    if (month < 1 || month > 12) {
        sendMessage("‚ùå Th√°ng kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p t·ª´ 1 ƒë·∫øn 12.");
        return;
    }
    
    sendTypingAction();
    Logger.log("üìä ƒêang ph√¢n t√≠ch th√°ng: " + month);
    sendTextChart(month, null);
    return;
}

// ‚úÖ S·ª≠a l·ªói h√†m x·ª≠ l√Ω l·ªánh ph√¢n t√≠ch ng√†y
if (text.startsWith("/phantichngay")) {
    text = text.replace(/\s+/g, " ").trim();
    
    let day, month;
    const dateMatch = text.match(/^\/phantichngay\s*(\d{1,2})?\/?(\d{1,2})?$/);
    
    if (dateMatch && dateMatch[1] && dateMatch[2]) {
        day = Number(dateMatch[1]);
        month = Number(dateMatch[2]);
    } else {
        const now = new Date();
        day = now.getDate();
        month = now.getMonth() + 1;
    }
    
    if (month < 1 || month > 12 || day < 1 || day > 31) {
        sendMessage("‚ùå Ng√†y ho·∫∑c th√°ng kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng.");
        return;
    }
    
    sendTypingAction();
    Logger.log("üìä ƒêang ph√¢n t√≠ch ng√†y: " + day + "/" + month);
    sendTextChart(month, day);
    return;
}

// ‚úÖ S·ª≠a l·ªói hi·ªÉn th·ªã T·ªïng thu nh·∫≠p v√† T·ªïng chi ti√™u
function sendTextChart(month, day) {
    var sheetName = "Th√°ng " + month;
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
    
    if (!sheet) {
        sendMessage(`‚ùå Kh√¥ng t√¨m th·∫•y sheet '${sheetName}'. Vui l√≤ng ki·ªÉm tra Google Sheets!`);
        return;
    }
    
    var data = sheet.getDataRange().getValues();
    var expenseDetails = {};
    var incomeTotal = 0;
    var expenseTotal = 0;
    
    for (var i = 1; i < data.length; i++) {
        var dateText = data[i][0]; 
        var type = data[i][1];
        var categoryDetail = data[i][4];
        var amount = data[i][3];
        
        if (!amount || isNaN(amount) || amount === 0) continue;
        
        if (day) {
            var parts = dateText.split("/");
            if (parts.length !== 2) continue;
            var rowDay = parseInt(parts[0]);
            var rowMonth = parseInt(parts[1]);
            if (rowDay !== day || rowMonth !== month) continue;
        }
        
        if (type === "Chi ti√™u") {
            expenseTotal += amount;
            if (!expenseDetails[categoryDetail]) expenseDetails[categoryDetail] = 0;
            expenseDetails[categoryDetail] += amount;
        } else if (type === "Thu nh·∫≠p") {
            incomeTotal += amount;
        }
    }
    
    if (incomeTotal === 0 && expenseTotal === 0) {
        sendMessage(`üìä *Kh√¥ng c√≥ d·ªØ li·ªáu ${day ? 'chi ti√™u cho ng√†y ' + day + '/' + month : 'chi ti√™u cho th√°ng ' + month}*`);
        return;
    }

    var chartText = `üìä *Bi·ªÉu ƒë·ªì chi ti√™u ${day ? 'ng√†y ' + day + '/' + month : 'th√°ng ' + month}*\n\n`;
    
    for (var category in expenseDetails) {
        var amount = expenseDetails[category];
        var percentage = ((amount / expenseTotal) * 100).toFixed(1);
        chartText += `üìå *${category}* | ${percentage}%\n`;
    }
    
    chartText += `\nüí∞ *T·ªïng thu nh·∫≠p th√°ng ${month}:* ${incomeTotal.toLocaleString()} VNƒê\n`;
    chartText += `üí∏ *T·ªïng chi ti√™u th√°ng ${month}:* ${expenseTotal.toLocaleString()} VNƒê\n`;

    sendMessage(chartText, { parse_mode: "Markdown" });
}
  var sheet = SpreadsheetApp.getActiveSpreadsheet();

  // G·ª≠i tr·∫°ng th√°i "typing..."
  sendTypingAction();

  // L∆∞u update_id, n·∫øu tr√πng l·∫∑p th√¨ b·ªè qua x·ª≠ l√Ω
  if (!saveUpdateID(update_id)) return;

  // Regex ki·ªÉm tra c√∫ ph√°p
  var regex = /^(\d{1,2}\/\d{1,2})\s+([+-]?\d+[kKmM]?)\s+(.+)$/;
  var match = text.match(regex);

  var now = new Date();
  var inputDate = Utilities.formatDate(now, "GMT+7", "dd/MM");
  var amountText, category;

  if (match) {
    var dateParts = match[1].split("/");
    var day = parseInt(dateParts[0], 10);
    var month = parseInt(dateParts[1], 10);
    
    inputDate = ("0" + day).slice(-2) + "/" + ("0" + month).slice(-2);
    amountText = match[2];
    category = match[3].trim();
  } else {
    var oldRegex = /^([+-]?\d+[kKmM]?)\s+(.+)$/;
    var oldMatch = text.match(oldRegex);

    if (!oldMatch) {
    sendMessage(
    `‚ùå *Sai c√∫ ph√°p nh·∫≠p li·ªáu!*
		üí∞ *N·∫øu mu·ªën nh·∫≠p s·ªë ti·ªÅn thu nh·∫≠p:*
		*Nh·∫≠p:* \`+S·ªë ti·ªÅn danh m·ª•c\`
		*V√≠ d·ª•:* \`+15m l∆∞∆°ng th√°ng 2\`
		*Ho·∫∑c:* \`Ng√†y +s·ªë ti·ªÅn danh m·ª•c\`
		*V√≠ d·ª•:* \`3/2 +5m l∆∞∆°ng OT \`
		
		üí∏ *N·∫øu mu·ªën nh·∫≠p s·ªë ti·ªÅn chi ti√™u:*
		*Nh·∫≠p:* \`S·ªë ti·ªÅn danh m·ª•c\`
		*V√≠ d·ª•:* \`500k ƒë·ªï d·∫ßu xe\`
		*Ho·∫∑c:* \`Ng√†y s·ªë ti·ªÅn danh m·ª•c\`
		*V√≠ d·ª•:* \`3/2 500k mua √°o\`

		üìä *N·∫øu mu·ªën xem b√°o c√°o:*
		*Nh·∫≠p:*
		\`/baocaothang\` ƒë·ªÉ xem b√°o c√°o th√°ng hi·ªán t·∫°i
		\`/baocaothang + s·ªë th√°ng\` ƒë·ªÉ xem b√°o c√°o th√°ng c·ª• th·ªÉ
		*V√≠ d·ª•:* \`/baocaothang 2\`
		\`/baocaongay\` ƒë·ªÉ xem b√°o c√°o ng√†y hi·ªán t·∫°i
		\`/baocaongay + s·ªë ng√†y\` ƒë·ªÉ xem b√°o c√°o c·ªßa ng√†y c·ª• th·ªÉ
		*V√≠ d·ª•:* \`/baocaongay 14/2\`

		üìä *N·∫øu mu·ªën xem bi·ªÉu ƒë·ªì % c√°c h·∫°ng m·ª•c:*
		*Nh·∫≠p:*
		\`/phantichthang\` ƒë·ªÉ xem bi·ªÉu ƒë·ªì % th√°ng hi·ªán t·∫°i
		\`/phantichthang + s·ªë th√°ng\` ƒë·ªÉ xem bi·ªÉu ƒë·ªì % th√°ng c·ª• th·ªÉ
		*V√≠ d·ª•:* \`/phantichthang 2\`
		\`/phantichngay\` ƒë·ªÉ xem bi·ªÉu ƒë·ªì % ng√†y hi·ªán t·∫°i
		\`/phantichngay + s·ªë ng√†y\` ƒë·ªÉ xem bi·ªÉu ƒë·ªì % c·ªßa ng√†y c·ª• th·ªÉ
		*V√≠ d·ª•:* \`/phantichngay 14/2\``,
        { parse_mode: "Markdown" }
    );
    return;
}
    amountText = oldMatch[1];
    category = oldMatch[2].trim();
  }

  category = capitalizeFirstLetter(category);
  var amount = parseMoney(amountText);
  if (!amount) {
    sendMessage("‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!");
    return;
  }

  var monthSheet = parseInt(inputDate.split("/")[1], 10);
  var sheetName = "Th√°ng " + monthSheet;
  var activeSheet = sheet.getSheetByName(sheetName);

  // ‚úÖ Ph·∫£n h·ªìi tin nh·∫Øn t·ª´ Telegram n·∫øu sheet kh√¥ng t·ªìn t·∫°i
  if (!activeSheet) {
    sendMessage(`‚ùå Sheet '${sheetName}' kh√¥ng t·ªìn t·∫°i! H√£y t·∫°o Sheet '${sheetName}' trong Google Sheet c·ªßa b·∫°n r·ªìi quay l·∫°i Telegram ƒë·ªÉ nh·∫≠p d·ªØ li·ªáu`);
    return;
}

  var type = amountText.startsWith("+") ? "Thu nh·∫≠p" : "Chi ti√™u";
  var categoryDetail = getCategory(category);
  var lastRow = activeSheet.getLastRow();
  var dateColumn = activeSheet.getRange("A2:A" + lastRow).getValues().flat();

  var insertRow = lastRow + 1; // D·ªØ li·ªáu ƒëi·ªÅn v√†o b·∫Øt ƒë·∫ßu t·ª´ h√†ng th·ª© 3 (Tr√°nh tr∆∞·ªùng h·ª£p l·ªói c√¥ng th·ª©c t√≠nh T·ªïng thu nh·∫≠p ·ªü √¥ G2 - T·ªïng chi ti√™u ·ªü √¥ H2)
  for (var i = 0; i < dateColumn.length; i++) {
    if (dateColumn[i] && dateColumn[i] > inputDate) {
      insertRow = i + 2;
      break;
    }
  }

  activeSheet.insertRowBefore(insertRow);
  activeSheet.getRange(insertRow, 1).setValue(inputDate);
  activeSheet.getRange(insertRow, 2).setValue(type);
  activeSheet.getRange(insertRow, 3).setValue(category);
  activeSheet.getRange(insertRow, 4).setValue(amount);
  activeSheet.getRange(insertRow, 5).setValue(categoryDetail);

  var totalIncome = activeSheet.getRange("G2").getValue();
  var totalExpense = activeSheet.getRange("H2").getValue();

// ƒê·ªãnh nghƒ©a icon cho t·ª´ng danh m·ª•c
let icons = {
    "ƒêi l·∫°i": "üöó",
    "ƒÇn u·ªëng": "üçΩÔ∏è",
    "Mua s·∫Øm": "üõçÔ∏è",
    "D·ªãch v·ª• gi·∫∑t ·ªßi": "üëï", 
    "H√≥a ƒë∆°n": "üßæ",
    "Nh√† c·ª≠a": "üè†",
    "Gi·∫£i tr√≠": "üéâ",
    "Y t·∫ø": "üíä",
    "Gi√°o d·ª•c": "üìö",
    "Gia ƒë√¨nh": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
    "ƒê·∫ßu t∆∞": "üìà",
    "Ti·∫øt ki·ªám": "üí∞",
    "C√¥ng vi·ªác & Kinh doanh": "üíº",
    "T·ª´ thi·ªán & X√£ h·ªôi": "ü§ù",
    "C√¥ng ngh·ªá & Thi·∫øt b·ªã ƒëi·ªán t·ª≠": "üì±",
    "Th√∫ c∆∞ng & ChƒÉm s√≥c th√∫ c∆∞ng": "üêæ",
    "Ti·ªác t√πng & S·ª± ki·ªán": "ü•Ç",
    "D·ªãch v·ª• t√†i ch√≠nh & Ng√¢n h√†ng": "üè¶",
    "D·ªãch v·ª• ph√°p l√Ω & H√†nh ch√≠nh c√¥ng": "üìú",
    "D·ªãch v·ª• s·ª≠a ch·ªØa & B·∫£o tr√¨": "üõ†Ô∏è",
    "L√†m ƒë·∫πp & ChƒÉm s√≥c c√° nh√¢n": "üíÑ",
    "Mua s·∫Øm online & TMƒêT": "üõí",
    "Ngh·ªá thu·∫≠t & S√°ng t·∫°o": "üé≠",
    "C√¥ng c·ª• & Ph·ª• t√πng": "üîß",
    "Thu·∫ø & D·ªãch v·ª• k·∫ø to√°n": "üßæ",
    "An ninh & Gi√°m s√°t": "üö®",
    "D·ªãch v·ª• ph√°p l√Ω & C√¥ng ch·ª©ng": "‚öñÔ∏è",
    "C√¥ng ngh·ªá & Thi·∫øt b·ªã s·ªë": "üíª",
    "V·∫≠n chuy·ªÉn & Logistics": "üöõ",
    "S·∫£n xu·∫•t & Gia c√¥ng": "üè≠",
    "Kh√≥a h·ªçc k·ªπ nƒÉng & ƒê√†o t·∫°o chuy√™n s√¢u": "üìñ",
    "Qu√† t·∫∑ng & ƒê·ªì l∆∞u ni·ªám": "üéÅ",
    "N√¥ng nghi·ªáp & L√†m v∆∞·ªùn": "üåæ",
    "B·∫£o hi·ªÉm & T√†i ch√≠nh c√° nh√¢n": "üõ°Ô∏è",
    "S·ª©c kh·ªèe & ƒê·ªùi s·ªëng": "üå±",
    "Kh√°c": "‚ùó"
};

// Ch·ªçn icon cho danh m·ª•c v√† ph√¢n lo·∫°i
let categoryIcon = icons[category] || (type === "Thu nh·∫≠p" ? "üí∞" : "üí∏"); 
let categoryDetailIcon = icons[categoryDetail] || "üìÇ"; // Th√™m icon cho ph√¢n lo·∫°i

sendMessage(
    `‚úÖ *ƒê√£ ghi nh·∫≠n:*\n` +
    `${categoryIcon} *${type}* - _${category}_ - *${amount.toLocaleString("vi-VN")} VNƒê*\n` +
    `üìÖ *Ng√†y:* ${inputDate}\n` +
    `${categoryDetailIcon} *Ph√¢n lo·∫°i:* _${categoryDetail}_\n` +
    `üìä *T·ªïng thu nh·∫≠p th√°ng ${monthSheet}:* ${totalIncome.toLocaleString("vi-VN")} VNƒê\n` +
    `üìâ *T·ªïng chi ti√™u th√°ng ${monthSheet}:* ${totalExpense.toLocaleString("vi-VN")} VNƒê`,
    { parse_mode: "Markdown" }
);
}

// ‚úÖ Ki·ªÉm tra ng√†y trong th√°ng ƒë·ªÉ ƒë·∫£m b·∫£o ƒëi·ªÅn ƒë√∫ng ng√†y v√†o v·ªã tr√≠
function compareDates(date1, date2) {
  var parts1 = date1.split("/");
  var parts2 = date2.split("/");

  var day1 = parseInt(parts1[0]);
  var month1 = parseInt(parts1[1]);
  var day2 = parseInt(parts2[0]);
  var month2 = parseInt(parts2[1]);

  if (month1 < month2) return -1;
  if (month1 > month2) return 1;
  return day1 - day2;
}
// ‚úÖ Chuy·ªÉn ƒë·ªïi s·ªë ti·ªÅn sang s·ªë nguy√™n ƒë√∫ng ƒë∆°n v·ªã
function parseMoney(input) {
  var amount = input.toLowerCase().replace(/[,vnƒë]/g, "").trim();
  if (amount.includes("k")) return parseFloat(amount) * 1000;
  if (amount.includes("m")) return parseFloat(amount) * 1000000;
  return parseFloat(amount);
}

// ‚úÖ Vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu ti√™n c·ªßa danh m·ª•c
function capitalizeFirstLetter(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

// ‚úÖ X√°c ƒë·ªãnh danh m·ª•c chi ti·∫øt
function getCategory(input) {
  input = input.toLowerCase().trim(); // Chu·∫©n h√≥a chu·ªói ƒë·∫ßu v√†o
  Logger.log("Input nh·∫≠n ƒë∆∞·ª£c: " + input);
  
  var categoryMap = {
      "ƒêi l·∫°i": [
		"ƒë·ªï xƒÉng", "xƒÉng", "d·∫ßu", "taxi", "grab", "be", "xe √¥m", "v√© xe", "ph√≠ c·∫ßu ƒë∆∞·ªùng",
		"b·∫£o hi·ªÉm xe", "ƒëƒÉng ki·ªÉm", "r·ª≠a xe", "thu√™ xe", "b·∫øn xe", "b√£i ƒë·ªó xe", "g·ª≠i xe",
		"ph√≠ giao th√¥ng", "tr·∫°m thu ph√≠", "b·∫£o tr√¨ xe"
	],
"ƒÇn u·ªëng": [
		"ƒÉn s√°ng", "ƒÉn tr∆∞a", "ƒÉn t·ªëi", "cafe", "c√† ph√™", "tr√† s·ªØa", "nh√† h√†ng", "ƒÉn",
		"nh·∫≠u", "mua ƒë·ªì ƒÉn", "buffet", "b√°nh m√¨", "tr√† chanh", "bia", "r∆∞·ª£u", "n∆∞·ªõc ng·ªçt",
		"c∆°m vƒÉn ph√≤ng", "ship ƒë·ªì ƒÉn", "n·∫•u ƒÉn", "b·∫øp gas", "b·ªØa ƒÉn", "g·ªçi ƒë·ªì ƒÉn", "ƒë·∫∑t ƒë·ªì ƒÉn",
		"ƒë·ªì u·ªëng", "n∆∞·ªõc √©p", "fastfood", "ƒë·ªì ƒÉn nhanh"
	],
"Mua s·∫Øm": [
		"mua", "mua √°o", "mua qu·∫ßn", "mua v√°y", "mua √°o kho√°c", "mua gi√†y", "mua t√∫i", "mua d√©p",
		"th·ªùi trang", "qu·∫ßn √°o", "gi√†y d√©p", "t√∫i x√°ch", "ƒë·ªìng h·ªì", "m·ªπ ph·∫©m", "k√≠nh m·∫Øt", "n∆∞·ªõc hoa",
		"mua s·∫Øm", "shopping", "balo", "ƒë·ªìng h·ªì th√¥ng minh", "ph·ª• ki·ªán th·ªùi trang"
	],
"D·ªãch v·ª• gi·∫∑t ·ªßi": [ 
		"gi·∫∑t qu·∫ßn √°o", "gi·∫∑t", "s·ª≠a qu·∫ßn √°o", "gi·∫∑t kh√¥", "·ªßi ƒë·ªì", "gi·∫∑t ·ªßi", "d·ªãch v·ª• gi·∫∑t", 
		"gi·∫∑t th·∫£m", "gi·∫∑t r√®m", "gi·∫∑t n·ªám", "lau d·ªçn"
	],
"H√≥a ƒë∆°n": [
		"ti·ªÅn ƒëi·ªán", "ti·ªÅn n∆∞·ªõc", "internet", "c√°p quang", "truy·ªÅn h√¨nh", "gas", "n·∫°p ƒëi·ªán tho·∫°i",
		"ƒëi·ªán tho·∫°i tr·∫£ sau", "d·ªãch v·ª• c√¥ng", "h√≥a ƒë∆°n ƒëi·ªán t·ª≠", "ti·ªÅn r√°c", "b·∫£o tr√¨ h·ªá th·ªëng",
		"ph√≠ chung c∆∞", "ƒëi·ªán l·ª±c", "ti·ªÅn c∆∞·ªõc", "c∆∞·ªõc vi·ªÖn th√¥ng", "h√≥a ƒë∆°n sinh ho·∫°t"
	],
"Nh√† c·ª≠a": [
		"ti·ªÅn nh√†", "thu√™ nh√†", "s·ª≠a nh√†", "n·ªôi th·∫•t", "ƒë·ªì gia d·ª•ng", "c√¢y c·∫£nh", "chung c∆∞",
		"b·∫£o tr√¨ nh√†", "trang tr√≠ nh√†", "s∆°n nh√†", "r√®m c·ª≠a", "gi∆∞·ªùng t·ªß", "sofa", "ƒë·ªì b·∫øp",
		"b√°t ƒëƒ©a", "m√°y l·ªçc n∆∞·ªõc", "b·∫£o d∆∞·ª°ng nh√†", "x√¢y nh√†", "c·∫£i t·∫°o nh√†", "s·ª≠a ch·ªØa ƒëi·ªán n∆∞·ªõc"
	],
"Gi·∫£i tr√≠": [
		"r·∫°p phim", "xem phim", "karaoke", "tr√≤ ch∆°i", "ch∆°i game", "du l·ªãch", "kh√°ch s·∫°n",
		"v√© m√°y bay", "c√¥ng vi√™n", "spa", "xem b√≥ng ƒë√°", "nh·∫°c h·ªôi", "th·ªÉ thao", "gym", "yoga",
		"b∆°i l·ªôi", "concert", "gi·∫£i ƒë·∫•u", "thu√™ homestay", "v√© s·ª± ki·ªán", "tham quan", "gi·∫£i tr√≠", "phim chi·∫øu r·∫°p"
	],
"Y t·∫ø": [
		"b·ªánh vi·ªán", "kh√°m b·ªánh", "thu·ªëc", "b·∫£o hi·ªÉm", "gym", "yoga", "b√°c sƒ©", "nha khoa", "x√©t nghi·ªám",
		"mua thu·ªëc", "ti√™m ch·ªßng", "s·ª©c kh·ªèe", "ƒë√¥ng y", "vi·ªán ph√≠", "b·∫£o hi·ªÉm s·ª©c kh·ªèe", "d∆∞·ª£c ph·∫©m",
		"kh·∫©u trang", "v·∫≠t t∆∞ y t·∫ø"
	],
"Gi√°o d·ª•c": [
		"h·ªçc ph√≠", "s√°ch v·ªü", "kh√≥a h·ªçc", "ƒë·ªìng ph·ª•c", "gia s∆∞", "trung t√¢m anh ng·ªØ", "luy·ªán thi",
		"ƒë·∫°i h·ªçc", "h·ªçc online", "h·ªçc th√™m", "ch·ª©ng ch·ªâ", "t√†i li·ªáu h·ªçc t·∫≠p", "kh√≥a h·ªçc tr·ª±c tuy·∫øn",
		"ƒëƒÉng k√Ω l·ªõp h·ªçc", "gi√°o tr√¨nh", "h·ªçc li·ªáu", "ƒë√†o t·∫°o"
	],
"Gia ƒë√¨nh": [
		"sinh nh·∫≠t", "ti·ªÅn m·ª´ng", "chƒÉm con", "b·ªâm s·ªØa", "ƒë·ªì ch∆°i tr·∫ª em", "m·ª´ng th·ªç", "h·ªó tr·ª£ ng∆∞·ªùi th√¢n",
		"qu√† l·ªÖ t·∫øt", "nu√¥i th√∫ c∆∞ng", "ƒë·ªì d√πng tr·∫ª em", "chƒÉm s√≥c √¥ng b√†", "gia ƒë√¨nh", "ƒë√°m c∆∞·ªõi", "m·ª´ng sinh nh·∫≠t", "t·∫∑ng qu√†"
	],
"ƒê·∫ßu t∆∞": [
		"ƒë·∫ßu t∆∞", "ch·ª©ng kho√°n", "coin", "b·∫•t ƒë·ªông s·∫£n", "forex", "crypto", "c·ªï phi·∫øu", "l·ª£i nhu·∫≠n",
		"l√£i su·∫•t", "v√†ng", "qu·ªπ ƒë·∫ßu t∆∞", "tr√°i phi·∫øu", "giao d·ªãch", "h·ª£p ƒë·ªìng", "b·∫•t ƒë·ªông s·∫£n cho thu√™",
		"l·ª£i nhu·∫≠n ƒë·∫ßu t∆∞", "qu·ªπ h∆∞u tr√≠"
	],
"Ti·∫øt ki·ªám": [
		"ti·∫øt ki·ªám", "g·ª≠i ng√¢n h√†ng", "s·ªï ti·∫øt ki·ªám", "qu·ªπ ƒë·∫ßu t∆∞", "l√£i su·∫•t ng√¢n h√†ng", "b·∫£o hi·ªÉm nh√¢n th·ªç",
		"t√≠ch l≈©y", "ng√¢n h√†ng s·ªë", "t√†i kho·∫£n ti·∫øt ki·ªám", "g·ª≠i g√≥p", "kho·∫£n ti·∫øt ki·ªám"
	],
"C√¥ng vi·ªác & Kinh doanh": [
        "doanh nghi·ªáp", "kh·ªüi nghi·ªáp", "startup", "kinh doanh", "b√°n h√†ng", 
        "ƒë·∫ßu t∆∞", "thu nh·∫≠p", "h·ª£p t√°c", "tuy·ªÉn d·ª•ng", "t√¨m vi·ªác", 
        "c√¥ng ty", "l∆∞∆°ng", "ƒë√†m ph√°n", "h·ª£p ƒë·ªìng kinh doanh"
	],
"T·ª´ thi·ªán & X√£ h·ªôi": [
        "t·ª´ thi·ªán", "quy√™n g√≥p", "·ªßng h·ªô", "h·ªó tr·ª£ c·ªông ƒë·ªìng", "tr·ª£ c·∫•p", 
        "t√¨nh nguy·ªán", "ch∆∞∆°ng tr√¨nh x√£ h·ªôi", "t·ªï ch·ª©c phi l·ª£i nhu·∫≠n", "gi√∫p ƒë·ª°", 
        "qu·ªπ t·ª´ thi·ªán", "hi·∫øn m√°u", "t·∫∑ng s√°ch", "h·ªó tr·ª£ ng∆∞·ªùi kh√≥ khƒÉn"
	],
"C√¥ng ngh·ªá & Thi·∫øt b·ªã ƒëi·ªán t·ª≠": [
        "ƒëi·ªán tho·∫°i", "m√°y t√≠nh b·∫£ng", "m√°y t√≠nh x√°ch tay", "tai nghe", "loa bluetooth", 
        "m√°y ·∫£nh", "smartwatch", "·ªï c·ª©ng", "USB", "card ƒë·ªì h·ªça", 
        "b√†n ph√≠m c∆°", "tai nghe gaming", "m√†n h√¨nh m√°y t√≠nh", "chu·ªôt kh√¥ng d√¢y"
	],
"Th√∫ c∆∞ng & ChƒÉm s√≥c th√∫ c∆∞ng": [
        "th·ª©c ƒÉn cho th√∫ c∆∞ng", "b√°nh th∆∞·ªüng", "chƒÉm s√≥c l√¥ng", "ph·ª• ki·ªán th√∫ c∆∞ng", 
        "chu·ªìng nu√¥i", "d·ª•ng c·ª• v·ªá sinh", "b√°c sƒ© th√∫ y", "spa th√∫ c∆∞ng", "th·ª©c ƒÉn kh√¥", 
        "ƒë·ªì ch∆°i ch√≥ m√®o", "hu·∫•n luy·ªán th√∫ c∆∞ng", "c√°t v·ªá sinh", "balo v·∫≠n chuy·ªÉn"
	],
"Ti·ªác t√πng & S·ª± ki·ªán": [
        "ƒë·∫∑t ti·ªác", "sinh nh·∫≠t", "ti·ªác c∆∞·ªõi", "h·ªôi ngh·ªã", "trang tr√≠ s·ª± ki·ªán", 
        "ƒë√°m c∆∞·ªõi", "party", "thu√™ MC", "ban nh·∫°c", "d·ªãch v·ª• ch·ª•p ·∫£nh", 
        "t·ªï ch·ª©c s·ª± ki·ªán", "thu√™ √¢m thanh √°nh s√°ng", "ƒë·∫∑t b√°nh kem", "ph√°o hoa"
	],
"D·ªãch v·ª• t√†i ch√≠nh & Ng√¢n h√†ng": [
        "ng√¢n h√†ng", "chuy·ªÉn kho·∫£n", "ph√≠ d·ªãch v·ª• ng√¢n h√†ng", "t√†i kho·∫£n s·ªë", 
        "d·ªãch v·ª• t√†i ch√≠nh", "r√∫t ti·ªÅn", "n·∫°p ti·ªÅn", "ƒë·∫ßu t∆∞ t√†i ch√≠nh", 
        "m·ªü t√†i kho·∫£n", "b·∫£o hi·ªÉm t√†i ch√≠nh", "vay v·ªën", "ti·ªÅn g·ª≠i"
    ],
"D·ªãch v·ª• ph√°p l√Ω & H√†nh ch√≠nh c√¥ng": [
        "t∆∞ v·∫•n ph√°p l√Ω", "lu·∫≠t s∆∞", "d·ªãch v·ª• ph√°p l√Ω", "so·∫°n th·∫£o h·ª£p ƒë·ªìng", 
        "gi·∫•y ph√©p kinh doanh", "c√¥ng ch·ª©ng", "lu·∫≠t doanh nghi·ªáp", "t√≤a √°n", 
        "d·ªãch v·ª• h√†nh ch√≠nh", "c·∫•p gi·∫•y ph√©p", "h·ª£p ƒë·ªìng lao ƒë·ªông", "b·∫£o hi·ªÉm x√£ h·ªôi"
    ],
"D·ªãch v·ª• s·ª≠a ch·ªØa & B·∫£o tr√¨": [
        "s·ª≠a", "s·ª≠a ch·ªØa", "b·∫£o tr√¨", "thay th·∫ø linh ki·ªán", "ƒëi·ªán l·∫°nh", "ƒëi·ªán t·ª≠", 
        "th·ª£ s·ª≠a ch·ªØa", "ƒëi·ªán n∆∞·ªõc", "s·ª≠a m√°y t√≠nh", "s·ª≠a ƒë·ªì gia d·ª•ng", "b·∫£o tr√¨ thi·∫øt b·ªã", 
        "thay pin", "v·ªá sinh m√°y l·∫°nh", "b·∫£o d∆∞·ª°ng xe m√°y", "s·ª≠a ch·ªØa √¥ t√¥"
    ],
"L√†m ƒë·∫πp & ChƒÉm s√≥c c√° nh√¢n": [
        "m·ªπ ph·∫©m", "l√†m ƒë·∫πp", "spa", "t√≥c", "nail", "chƒÉm s√≥c da", "d·ªãch v·ª• th·∫©m m·ªπ", 
        "th·ªùi trang n·ªØ", "n∆∞·ªõc hoa", "makeup", "d·ªãch v·ª• massage", "s√°p vu·ªët t√≥c", 
        "chƒÉm s√≥c t√≥c", "ƒëi·ªÅu tr·ªã m·ª•n", "ph·∫´u thu·∫≠t th·∫©m m·ªπ"
    ],
"Mua s·∫Øm online & TMƒêT": [
        "mua s·∫Øm online", "mua", "ƒë·∫∑t h√†ng online", "th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠", "shopee", "lazada", 
        "tiki", "sendo", "mua h√†ng qu·ªëc t·∫ø", "amazon", "ebay", "order h√†ng", "ƒë·∫∑t h√†ng n∆∞·ªõc ngo√†i"
    ],
"Ngh·ªá thu·∫≠t & S√°ng t·∫°o": [
        "h·ªôi h·ªça", "ƒëi√™u kh·∫Øc", "v·∫Ω tranh", "thi·∫øt k·∫ø ƒë·ªì h·ªça", "nhi·∫øp ·∫£nh", "s√°ng t√°c", 
        "vi·∫øt s√°ch", "√¢m nh·∫°c", "v·∫Ω digital", "ngh·ªá thu·∫≠t ƒë∆∞·ªùng ph·ªë", "ƒë√†n piano", 
        "trang tr√≠ n·ªôi th·∫•t", "ƒë·ªì handmade"
    ],
"C√¥ng c·ª• & Ph·ª• t√πng": [
        "d·ª•ng c·ª• s·ª≠a ch·ªØa", "m√°y khoan", "b√∫a", "c·ªù l√™", "ƒëinh v√≠t", "m√°y c·∫Øt", 
        "b·ªô d·ª•ng c·ª•", "s√∫ng b·∫Øn keo", "d·ª•ng c·ª• c∆° kh√≠", "m√°y h√†n", "m√°y b∆°m n∆∞·ªõc"
    ],
"Thu·∫ø & D·ªãch v·ª• k·∫ø to√°n": [
        "thu·∫ø thu nh·∫≠p", "k·∫ø to√°n doanh nghi·ªáp", "b√°o c√°o t√†i ch√≠nh", "quy·∫øt to√°n thu·∫ø", 
        "d·ªãch v·ª• k·∫ø to√°n", "t∆∞ v·∫•n thu·∫ø", "h√≥a ƒë∆°n ƒë·ªè", "s·ªï s√°ch k·∫ø to√°n"
    ],
"An ninh & Gi√°m s√°t": [
        "camera gi√°m s√°t", "h·ªá th·ªëng b√°o ƒë·ªông", "kh√≥a v√¢n tay", "b·∫£o v·ªá", 
        "b√°o ch√°y", "h·ªá th·ªëng an ninh", "thi·∫øt b·ªã ch·ªëng tr·ªôm", "c·∫£m bi·∫øn c·ª≠a"
    ],
"D·ªãch v·ª• ph√°p l√Ω & C√¥ng ch·ª©ng": [
        "c√¥ng ch·ª©ng", "ch·ª©ng th·ª±c gi·∫•y t·ªù", "h·ª£p ƒë·ªìng mua b√°n", "chuy·ªÉn nh∆∞·ª£ng ƒë·∫•t", 
        "lu·∫≠t s∆∞ t∆∞ v·∫•n", "di ch√∫c", "gi·∫•y t·ªù nh√† ƒë·∫•t", "ƒëƒÉng k√Ω kinh doanh"
    ],
"C√¥ng ngh·ªá & Thi·∫øt b·ªã s·ªë": [
        "ƒëi·ªán tho·∫°i", "m√°y t√≠nh", "m√°y ·∫£nh", "tivi", "tablet", "ph·ª• ki·ªán ƒëi·ªán t·ª≠", 
        "·ªï c·ª©ng", "ram", "card ƒë·ªì h·ªça", "router wifi", "ƒë·ªìng h·ªì th√¥ng minh"
    ],
"V·∫≠n chuy·ªÉn & Logistics": [
        "giao h√†ng", "v·∫≠n chuy·ªÉn", "chuy·ªÉn ph√°t nhanh", "d·ªãch v·ª• ship h√†ng", 
        "chuy·ªÉn nh√†", "b·ªëc x·∫øp h√†ng h√≥a", "logistics", "d·ªãch v·ª• kho b√£i", "chuy·ªÉn h√†ng qu·ªëc t·∫ø"
    ],
"S·∫£n xu·∫•t & Gia c√¥ng": [
        "s·∫£n xu·∫•t c√¥ng nghi·ªáp", "m√°y m√≥c", "gia c√¥ng c∆° kh√≠", "in ·∫•n", "x∆∞·ªüng s·∫£n xu·∫•t", 
        "may m·∫∑c", "ch·∫ø bi·∫øn th·ª±c ph·∫©m", "gia c√¥ng nh·ª±a", "gia c√¥ng g·ªó"
    ],
"Kh√≥a h·ªçc k·ªπ nƒÉng & ƒê√†o t·∫°o chuy√™n s√¢u": [
        "h·ªçc k·ªπ nƒÉng", "ƒë√†o t·∫°o ngh·ªÅ", "ch·ª©ng ch·ªâ h√†nh ngh·ªÅ", "h·ªçc l·∫≠p tr√¨nh", 
        "h·ªçc marketing", "ƒë√†o t·∫°o k·∫ø to√°n", "h·ªçc ngo·∫°i ng·ªØ", "luy·ªán thi ch·ª©ng ch·ªâ"
    ],
"Qu√† t·∫∑ng & ƒê·ªì l∆∞u ni·ªám": [
        "qu√† t·∫∑ng", "ƒë·ªì l∆∞u ni·ªám", "qu√† sinh nh·∫≠t", "tranh treo t∆∞·ªùng", "ƒë·ªì decor", 
        "hoa t∆∞∆°i", "h·ªôp qu√†", "qu√† t·∫∑ng doanh nghi·ªáp", "qu√† c∆∞·ªõi"
    ],
"N√¥ng nghi·ªáp & L√†m v∆∞·ªùn": [
        "c√¢y tr·ªìng", "h·∫°t gi·ªëng", "ph√¢n b√≥n", "thu·ªëc tr·ª´ s√¢u", "ƒë·∫•t tr·ªìng c√¢y", 
        "v∆∞·ªùn rau", "chƒÉm s√≥c c√¢y c·∫£nh", "d·ª•ng c·ª• l√†m v∆∞·ªùn", "hoa ki·ªÉng"
    ],
"B·∫£o hi·ªÉm & T√†i ch√≠nh c√° nh√¢n": [
        "b·∫£o hi·ªÉm nh√¢n th·ªç", "b·∫£o hi·ªÉm s·ª©c kh·ªèe", "b·∫£o hi·ªÉm xe m√°y", "b·∫£o hi·ªÉm √¥ t√¥", 
        "qu·ªπ ƒë·∫ßu t∆∞", "ch·ª©ng kho√°n", "b·∫£o hi·ªÉm du l·ªãch", "b·∫£o hi·ªÉm lao ƒë·ªông"
    ],
"S·ª©c kh·ªèe & ƒê·ªùi s·ªëng": [
        "dinh d∆∞·ª°ng", "th·ª±c ph·∫©m ch·ª©c nƒÉng", "vitamin", "kho√°ng ch·∫•t", "s·ªØa dinh d∆∞·ª°ng", 
        "omega-3", "collagen", "men vi sinh", "tinh d·∫ßu th∆∞ gi√£n", "gi·∫•c ng·ªß", 
        "thi·ªÅn ƒë·ªãnh", "tr·ªã li·ªáu t√¢m l√Ω", "xe ƒë·∫°p", "gi·∫£m c√¢n", "s·ª©c kh·ªèe sinh s·∫£n"
    ],
     "Kh√°c": [] // N·∫øu kh√¥ng kh·ªõp danh m·ª•c n√†o
};

 // T√≠nh ƒëi·ªÉm cho t·ª´ng danh m·ª•c
  var categoryScores = {};
  var bestCategory = "Kh√°c";
  var highestScore = 0;

  for (var category in categoryMap) {
    var score = 0;
    var keywords = categoryMap[category];

    for (var i = 0; i < keywords.length; i++) {
      if (input.includes(keywords[i])) {
        score++;
      }
    }

    if (score > 0) {
      categoryScores[category] = score;
      if (score > highestScore) {
        highestScore = score;
        bestCategory = category;
      }
    }
  }

  Logger.log("ƒêi·ªÉm danh m·ª•c: " + JSON.stringify(categoryScores));
  Logger.log("Ch·ªçn danh m·ª•c: " + bestCategory);

  return bestCategory;
}

// ‚úÖ Ki·ªÉm tra t√≠nh ƒë√∫ng ƒë·∫Øn
function testCategory() {
  Logger.log(getCategory("50k mua d√¢y ƒë·ªìng h·ªì shopee"));   // Mua s·∫Øm online & TMƒêT
  Logger.log(getCategory("100k mua gi√†y adidas"));         // Mua s·∫Øm
  Logger.log(getCategory("200k ƒë·∫∑t h√†ng lazada"));         // Mua s·∫Øm online & TMƒêT
  Logger.log(getCategory("150k mua qu·∫ßn √°o"));             // Mua s·∫Øm
  Logger.log(getCategory("50k ƒë·ªï xƒÉng xe m√°y"));           // ƒêi l·∫°i
  Logger.log(getCategory("300k ƒëi kh√°m b·ªánh vi·ªán"));       // Y t·∫ø
  Logger.log(getCategory("250k thu√™ homestay"));           // Gi·∫£i tr√≠
  Logger.log(getCategory("400k gi·∫∑t r√®m c·ª≠a"));            // D·ªãch v·ª• gi·∫∑t ·ªßi
  Logger.log(getCategory("120k mua s√°ch gi√°o tr√¨nh"));     // Gi√°o d·ª•c
  Logger.log(getCategory("999k ti·ªÅn l·∫∑t v·∫∑t"));            // Kh√°c
}

// ‚úÖ B√°o c√°o ng√†y
function sendDailyReport(day, month) {
    var sheetName = "Th√°ng " + month;
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);

    if (!sheet) {
        sendMessage(`‚ùå Kh√¥ng t√¨m th·∫•y sheet '${sheetName}'. Vui l√≤ng ki·ªÉm tra Google Sheets!`);
        return;
    }

    var data = sheet.getDataRange().getValues();
    var report = `üìÖ *B√°o c√°o ng√†y ${day}/${month}*\n\n`;
    var expenseDetails = {};
    var totalExpense = 0;
    var totalIncome = 0;

    for (var i = 1; i < data.length; i++) {
        var dateText = data[i][0]; // C·ªôt ng√†y
        var type = data[i][1]; // Chi ti√™u hay Thu nh·∫≠p
        var categoryDetail = data[i][4]; // Ph√¢n lo·∫°i
        var amount = data[i][3]; // S·ªë ti·ªÅn

        if (!amount || isNaN(amount) || amount === 0) continue;
        if (!dateText || typeof dateText !== "string") continue;

        var parts = dateText.split("/");
        if (parts.length !== 2) continue;

        var rowDay = parseInt(parts[0]);
        var rowMonth = parseInt(parts[1]);

        if (rowDay !== day || rowMonth !== month) continue;

        if (type === "Chi ti√™u") {
            totalExpense += amount;
            if (!expenseDetails[categoryDetail]) expenseDetails[categoryDetail] = 0;
            expenseDetails[categoryDetail] += amount;
        } else if (type === "Thu nh·∫≠p") {
            totalIncome += amount;
        }
    }

    if (totalExpense === 0 && totalIncome === 0) {
        sendMessage(`üìÖ *B√°o c√°o ng√†y ${day}/${month}*\n\n‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu chi ti√™u ho·∫∑c thu nh·∫≠p.`);
        return;
    }

    for (var category in expenseDetails) {
        report += `üìå *${category}*: ${expenseDetails[category].toLocaleString("vi-VN")} VNƒê\n`;
    }

    report += `\nüí∞ *T·ªïng thu nh·∫≠p:* ${totalIncome.toLocaleString("vi-VN")} VNƒê\n`;
    report += `üí∏ *T·ªïng chi ti√™u:* ${totalExpense.toLocaleString("vi-VN")} VNƒê\n`;

    sendMessage(report, { parse_mode: "Markdown" });
}

// ‚úÖ B√°o c√°o th√°ng
function sendMonthlyReport(month) {
    if (!Number.isInteger(month) || month < 1 || month > 12) {
        sendMessage("‚ùå L·ªói h·ªá th·ªëng! Th√°ng kh√¥ng h·ª£p l·ªá.");
        return;
    }

    var sheetName = "Th√°ng " + month;
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
    
    if (!sheet) {
        sendMessage(`‚ùå Kh√¥ng t√¨m th·∫•y sheet '${sheetName}'. Vui l√≤ng ki·ªÉm tra Google Sheets!`);
        return;
    }

    var data = sheet.getDataRange().getValues();

    if (data.length <= 1) { 
        sendMessage(`üìä *B√°o c√°o th√°ng ${month}*\n\n‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu giao d·ªãch trong th√°ng n√†y.`);
        return;
    }

    var report = `üìä *B√°o c√°o th√°ng ${month}*\n\n`;
    var expenseDetails = {};
    var totalExpense = 0;
    var totalIncome = 0;

    for (var i = 1; i < data.length; i++) { 
        var type = data[i][1]; 
        var categoryDetail = data[i][4]; 
        var amount = data[i][3];

        if (!amount || isNaN(amount) || amount === 0) continue;

        if (type === "Chi ti√™u") {
            totalExpense += amount;
            if (!expenseDetails[categoryDetail]) expenseDetails[categoryDetail] = 0;
            expenseDetails[categoryDetail] += amount;
        } else if (type === "Thu nh·∫≠p") {
            totalIncome += amount;
        }
    }

    for (var category in expenseDetails) {
        report += `üìå *${category}*: ${expenseDetails[category].toLocaleString("vi-VN")} VNƒê\n`;
    }

    report += `\nüí∞ *T·ªïng thu nh·∫≠p:* ${totalIncome.toLocaleString("vi-VN")} VNƒê\n`;
    report += `üí∏ *T·ªïng chi ti√™u:* ${totalExpense.toLocaleString("vi-VN")} VNƒê\n`;

    sendMessage(report, { parse_mode: "Markdown" });
}


// ‚úÖ G·ª≠i tin nh·∫Øn Telegram
function sendMessage(text) {
  if (!TELEGRAM_CHAT_ID) {
    Logger.log("CHAT_ID ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p! Vui l√≤ng ch·∫°y getChatID() tr∆∞·ªõc.");
    return; // C·∫ßn return ƒë·ªÉ kh√¥ng ti·∫øp t·ª•c ch·∫°y code
  }

  var url = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/sendMessage";
  var payload = {
    "chat_id": TELEGRAM_CHAT_ID,
    "text": text,
    "parse_mode": "Markdown"
  };

  var options = {
    "method": "post",
    "contentType": "application/json",
    "payload": JSON.stringify(payload)
  };

  UrlFetchApp.fetch(url, options);
}